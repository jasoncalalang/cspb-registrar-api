openapi: 3.0.1
info:
  title: Registrar API
  version: 1.0.0
paths:
  /api/students:
    get:
      summary: List students
      parameters:
        - in: query
          name: lastName
          schema:
            type: string
          description: Optional last name filter
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
    post:
      summary: Create students
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              minItems: 1
              items:
                $ref: '#/components/schemas/StudentCreate'
            example:
              - lrn: "123456789012"
                lastName: Doe
                firstName: John
                birthDate: "2000-01-01"
                birthPlace: Manila
                gender: M
                nationality: Filipino
                religion: Catholic
                address:
                  houseNo: "123"
                  streetSubd: "Main St"
                    bgyCode: B1
                requirements:
                  - requirementTypeId: 1
                    submitted: true
                    submittedDate: "2024-01-05"
                parents:
                  - role: father
                    firstName: John
                    lastName: Doe
                    contactNum: "09171234567"
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
  /api/students/{id}:
    get:
      summary: Get student by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404':
          description: Not found
    put:
      summary: Replace student
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404':
          description: Not found
    patch:
      summary: Patch student
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '200':
          description: Patched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404':
          description: Not found
    delete:
      summary: Delete student
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No content
        '404':
          description: Not found
  /api/students/{id}/address:
    get:
      summary: Retrieve a student's address
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '404':
          description: Not found
    put:
      summary: Replace a student's address
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '404':
          description: Not found
    delete:
      summary: Delete a student's address
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No content
        '404':
          description: Not found
  /requirement-types:
    get:
      summary: List requirement types
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RequirementType'
  /api/students/{id}/requirements:
    get:
      summary: Get requirements for a student
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Requirement'
        '404':
          description: Not found
    patch:
      summary: Batch update requirements
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Requirement'
      responses:
        '204':
          description: No content
        '404':
          description: Not found
  /api/students/{id}/parents:
    get:
      summary: Get parents or guardians for a student
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ParentGuardian'
        '404':
          description: Not found
    patch:
      summary: Batch update parents or guardians
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ParentGuardian'
      responses:
        '204':
          description: No content
        '404':
          description: Not found
  /api/students/{id}/requirements/{typeId}:
    put:
      summary: Set/update a requirement
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: typeId
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Requirement'
      responses:
        '204':
          description: No content
        '404':
          description: Not found
  /api/students/{id}/scan:
    post:
      summary: Scan student for attendance
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanResult'
        '400':
          description: Invalid scan within 5 minute window
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanResult'
        '404':
          description: Not found
  /health:
    get:
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
  /api/health:
    get:
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
components:
  schemas:
    Student:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique student identifier
          example: 1
        lrn:
          type: string
          description: Learner reference number
          example: "123456789012"
        lastName:
          type: string
          description: Last name
          example: Doe
        firstName:
          type: string
          description: First name
          example: John
        middleName:
          type: string
          description: Middle name
          example: Q
        extensionName:
          type: string
          description: Name extension
          example: Jr
        birthDate:
          type: string
          format: date
          description: Date of birth
          example: "2000-01-01"
        birthPlace:
          type: string
          description: Place of birth
          example: Manila
        gender:
          type: string
          description: Gender
          example: M
        nationality:
          type: string
          description: Nationality
          example: Filipino
        religion:
          type: string
          description: Religion
          example: Catholic
        numSiblings:
          type: integer
          format: int32
          description: Number of siblings
          example: 2
        siblingNames:
          type: string
          description: Names of siblings
          example: "Jane Doe, Jim Doe"
        imgPath:
          type: string
          description: Image path
          example: "/images/students/1.jpg"
        createdAt:
          type: string
          format: date-time
          description: Time record was created
          example: "2024-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Time record was last updated
          example: "2024-01-02T12:00:00Z"
    StudentCreate:
      type: object
      properties:
        lrn:
          type: string
        lastName:
          type: string
        firstName:
          type: string
        middleName:
          type: string
        extensionName:
          type: string
        birthDate:
          type: string
          format: date
        birthPlace:
          type: string
        gender:
          type: string
        nationality:
          type: string
        religion:
          type: string
        numSiblings:
          type: integer
          format: int32
        siblingNames:
          type: string
        imgPath:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        requirements:
          type: array
          items:
            $ref: '#/components/schemas/Requirement'
        parents:
          type: array
          items:
            $ref: '#/components/schemas/ParentGuardian'
      example:
        lrn: "123456789012"
        lastName: Doe
        firstName: John
        birthDate: "2000-01-01"
        birthPlace: Manila
        gender: M
        nationality: Filipino
        religion: Catholic
        address:
          houseNo: "123"
          streetSubd: "Main St"
          bgyCode: B1
        requirements:
          - requirementTypeId: 1
            submitted: true
            submittedDate: "2024-01-05"
        parents:
          - role: father
            firstName: John
            lastName: Doe
            contactNum: "09171234567"
    Address:
      type: object
      properties:
        houseNo:
          type: string
          description: House number
          example: "123"
        streetSubd:
          type: string
          description: Street or subdivision
          example: "Main St"
        bgyCode:
          type: string
          description: Barangay code
          example: B1
    Requirement:
      type: object
      properties:
        requirementTypeId:
          type: integer
          format: int32
          description: Requirement type identifier
          example: 1
        submitted:
          type: boolean
          description: Whether the requirement was submitted
          example: true
        submittedDate:
          type: string
          format: date
          description: Date of submission
          example: "2024-01-05"
    RequirementType:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Requirement type identifier
          example: 1
        name:
          type: string
          description: Requirement name
          example: "Birth Certificate"
    ParentGuardian:
      type: object
      properties:
        role:
          type: string
          description: Relationship to the student
          example: father
        firstName:
          type: string
          description: First name
          example: John
        lastName:
          type: string
          description: Last name
          example: Doe
        middleName:
          type: string
          description: Middle name
          example: Q
        occupation:
          type: string
          description: Occupation
          example: Engineer
        contactNum:
          type: string
          description: Contact number
          example: '09171234567'
        email:
          type: string
          description: Email address
          example: father@example.com
        highestEducationalAttainment:
          type: string
          description: Highest educational attainment
          example: College
    Health:
      type: object
      properties:
        message:
          type: string
          example: OK
    ScanResult:
      type: object
      properties:
        message:
          type: string
          example: successful
        dateTime:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"

